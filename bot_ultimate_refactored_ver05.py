import streamlit as st
import pandas as pd
import json
import logging
import requests
import re
import os

gemini_api_key = os.environ.get('GEMINI_API_KEY')
telegram_token = os.environ.get('TELEGRAM_BOT_TOKEN')
telegram_chat_id = os.environ.get('TELEGRAM_GROUP_ID')

# === C·∫§U H√åNH === #
logging.basicConfig(
    filename='bot_optimizer.log',
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    encoding='utf-8'
)
load_dotenv()

cg = CoinGeckoAPI()
gemini_api_key = os.getenv('GEMINI_API_KEY')
telegram_token = os.getenv('TELEGRAM_BOT_TOKEN')
telegram_chat_id = os.getenv('TELEGRAM_GROUP_ID')

# === H√ÄM H·ªñ TR·ª¢ === #
def normalize_symbol(symbol: str) -> str:
    return symbol.lower().strip().replace('/', '')

def infer_trend_from_series(series: pd.Series, threshold: float = 1.0) -> str:
    if len(series) < 2:
        return "kh√¥ng ƒë·ªß d·ªØ li·ªáu"
    delta = series.iloc[-1] - series.iloc[0]
    percent_change = delta / series.iloc[0] * 100
    if percent_change > threshold:
        return 'tƒÉng'
    elif percent_change < -threshold:
        return 'gi·∫£m'
    return 'ƒëi ngang'

def check_price_range(current, low, high):
    if current < low:
        return f"‚ö†Ô∏è Gi√° {current} th·∫•p h∆°n v√πng ho·∫°t ƒë·ªông ({low} - {high})"
    if current > high:
        return f"‚ö†Ô∏è Gi√° {current} cao h∆°n v√πng ho·∫°t ƒë·ªông ({low} - {high})"
    return "‚úÖ Gi√° n·∫±m trong v√πng bot ho·∫°t ƒë·ªông."

def fetch_market_data(symbol='bitcoin', vs_currency='usdt'):
    try:
        try:
            data = cg.get_price(ids=symbol, vs_currencies=vs_currency, include_market_cap=True, include_24hr_vol=True)
            price = data[symbol][vs_currency]
        except Exception as e:
            logging.warning(f"Error with {vs_currency}, switching to usd: {e}")
            vs_currency = 'usd'
            data = cg.get_price(ids=symbol, vs_currencies=vs_currency)
            price = data[symbol]['usd']
        chart = cg.get_coin_market_chart_by_id(symbol, vs_currency, days=1)
        df = pd.DataFrame(chart['prices'], columns=['timestamp', 'price'])
        df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
        return df, price, vs_currency
    except Exception as e:
        logging.error(f"L·ªói l·∫•y d·ªØ li·ªáu CoinGecko: {e}")
        return None, None, None

def call_gemini_api(user_data, market_data, current_price):
    trend = infer_trend_from_series(market_data['price'])
    headers = {'Content-Type': 'application/json'}
    prompt = f"""
B·∫°n l√† chuy√™n gia ph√¢n t√≠ch t√†i ch√≠nh ti·ªÅn ƒëi·ªán t·ª≠ cho ng∆∞·ªùi Vi·ªát Nam. D·ª±a tr√™n d·ªØ li·ªáu sau, t·ªëi ∆∞u h√≥a bot spot l∆∞·ªõi:
- D·ªØ li·ªáu ng∆∞·ªùi d√πng: {json.dumps(user_data)}
- D·ªØ li·ªáu th·ªã tr∆∞·ªùng: Gi√° hi·ªán t·∫°i {current_price} {user_data.get('vs_currency', 'usdt').upper()}, xu h∆∞·ªõng {trend}.

Tr·∫£ l·ªùi d∆∞·ªõi d·∫°ng JSON v·ªõi c·∫•u tr√∫c ch√≠nh x√°c sau:
{{
    "optimization_recommendation": {{
        "action": "m√¥ t·∫£ h√†nh ƒë·ªông c·∫ßn th·ª±c hi·ªán",
        "reasoning": "gi·∫£i th√≠ch chi ti·∫øt l√Ω do",
        "recommended_parameters": {{
            "coin_symbol": "t√™n coin",
            "capital_allocation_usd": s·ªë v·ªën ƒë·ªÅ xu·∫•t,
            "vs_currency": "ti·ªÅn t·ªá",
            "range_low": gi√° th·∫•p nh·∫•t,
            "range_high": gi√° cao nh·∫•t,
            "number_of_grids": s·ªë √¥ l∆∞·ªõi,
            "strategy_type": "lo·∫°i chi·∫øn l∆∞·ª£c",
            "take_profit_target_percent": % l·ª£i nhu·∫≠n m·ª•c ti√™u,
            "stop_loss_percent": % c·∫Øt l·ªó,
            "notes": "ghi ch√∫ th√™m"
        }}
    }}
}}
"""
    payload = {'contents': [{'parts': [{'text': prompt}]}]}
    url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key={gemini_api_key}"

    try:
        resp = requests.post(url, json=payload, headers=headers)
        if resp.status_code != 200:
            logging.error(f"Gemini API error: {resp.status_code} - {resp.text}")
            return None
        response_text = resp.json().get('candidates', [{}])[0].get('content', {}).get('parts', [{}])[0].get('text', '{}')
        response_text = re.sub(r'^```json\s*|\s*```$', '', response_text).strip()
        return json.loads(response_text)
    except Exception as e:
        logging.warning(f"L·ªói khi ph√¢n t√≠ch JSON t·ª´ Gemini: {e}")
        return None

def send_telegram_message(message: str):
    if not telegram_token or not telegram_chat_id:
        logging.warning("Thi·∫øu TELEGRAM_BOT_TOKEN ho·∫∑c TELEGRAM_GROUP_ID")
        return
    url = f"https://api.telegram.org/bot{telegram_token}/sendMessage"
    data = {
        "chat_id": telegram_chat_id,
        "text": message,
        "parse_mode": "Markdown"
    }
    try:
        r = requests.post(url, data=data)
        if r.status_code != 200:
            logging.warning(f"L·ªói g·ª≠i Telegram: {r.status_code} - {r.text}")
    except Exception as e:
        logging.error(f"L·ªói k·∫øt n·ªëi Telegram: {e}")

def send_structured_telegram_update(json_data: dict):
    try:
        # Ki·ªÉm tra nhi·ªÅu tr∆∞·ªùng c√≥ th·ªÉ c√≥ t·ª´ AI response
        rec = None
        if "optimization_recommendation" in json_data:
            rec = json_data["optimization_recommendation"]
        elif "recommendation" in json_data:
            rec = json_data["recommendation"]
        elif "suggestions" in json_data:
            rec = json_data["suggestions"]
        elif "analysis" in json_data:
            rec = json_data["analysis"]
        else:
            # N·∫øu kh√¥ng t√¨m th·∫•y tr∆∞·ªùng n√†o, th·ª≠ g·ª≠i to√†n b·ªô JSON
            logging.warning("Kh√¥ng t√¨m th·∫•y tr∆∞·ªùng recommendation, g·ª≠i raw data")
            send_telegram_message(f"ü§ñ *Ph·∫£n h·ªìi t·ª´ AI:*\n```json\n{json.dumps(json_data, indent=2, ensure_ascii=False)}\n```")
            return

        action = rec.get("action", "Kh√¥ng r√µ")
        reasoning = rec.get("reasoning", "_Kh√¥ng c√≥ gi·∫£i th√≠ch n√†o ƒë∆∞·ª£c cung c·∫•p._")
        params = rec.get("recommended_parameters", rec.get("parameters", {}))

        message = f"""üìà *G·ª£i √Ω t·ªëi ∆∞u h√≥a bot* üìä

*üéØ H√†nh ƒë·ªông*: `{action}`
*üß† L√Ω do*:
_{reasoning}_

*‚öôÔ∏è Tham s·ªë ƒë·ªÅ xu·∫•t:*
- Coin: `{params.get("coin_symbol", "Kh√¥ng r√µ")}`
- V·ªën: `{params.get("capital_allocation_usd", "Kh√¥ng r√µ")} {params.get("vs_currency", "USD").upper()}`
- Range: `{params.get("range_low", "N/A")} - {params.get("range_high", "N/A")}`
- Grid: `{params.get("number_of_grids", "N/A")} √¥ | {params.get("strategy_type", "N/A")}`
- L·ª£i nhu·∫≠n m·ª•c ti√™u: `{params.get("take_profit_target_percent", "N/A")}%`
- C·∫Øt l·ªó: `{params.get("stop_loss_percent", "N/A")}%`
- Ghi ch√∫: _{params.get("notes", "Kh√¥ng c√≥ ghi ch√∫.")}_"""

        send_telegram_message(message)
    except Exception as e:
        logging.warning(f"L·ªói ƒë·ªãnh d·∫°ng g·ª≠i telegram c√≥ c·∫•u tr√∫c: {e}")
        # Fallback: g·ª≠i raw JSON
        try:
            send_telegram_message(f"‚ùó *L·ªói ƒë·ªãnh d·∫°ng, raw data:*\n```json\n{json.dumps(json_data, indent=2, ensure_ascii=False)}\n```")
        except:
            send_telegram_message("‚ùó Kh√¥ng th·ªÉ ph√¢n t√≠ch JSON ph·∫£n h·ªìi t·ª´ AI.")

# === GIAO DI·ªÜN STREAMLIT === #
st.title("ü§ñ Ultra Ultimate Spot Bot")

with st.expander("üì≤ Ki·ªÉm tra k·∫øt n·ªëi Telegram"):
    if st.button("üöÄ G·ª≠i test message"):
        send_telegram_message("‚úÖ Bot Telegram ƒë√£ k·∫øt n·ªëi th√†nh c√¥ng!")
        st.success("ƒê√£ g·ª≠i test message t·ªõi Telegram.")

with st.expander("üõ†Ô∏è T·∫°o bot m·ªõi"):
    col1, col2 = st.columns(2)
    
    with col1:
        symbol = normalize_symbol(st.text_input("T√™n coin (VD: bitcoin)", "bitcoin"))
        vs_currency = st.text_input("Ti·ªÅn t·ªá (VD: usdt)", "usdt").lower()
    
    with col2:
        initial_capital = st.number_input("V·ªën ban ƒë·∫ßu", value=100.0, min_value=1.0, step=10.0)
        st.info("üí° AI s·∫Ω ƒë∆∞a ra g·ª£i √Ω d·ª±a tr√™n s·ªë v·ªën n√†y")

    if st.button("üìä L·∫•y d·ªØ li·ªáu v√† ph√¢n t√≠ch"):
        df, price, currency = fetch_market_data(symbol, vs_currency)
        if df is not None:
            st.success(f"Gi√° hi·ªán t·∫°i: {price} {currency.upper()}")
            st.line_chart(df.set_index('timestamp')['price'])

            user_data = {
                'mode': 'new_bot',
                'coin_symbol': symbol,
                'initial_capital': initial_capital,
                'vs_currency': currency,
                'current_price': price
            }
            suggestions = call_gemini_api(user_data, df, price)
            if suggestions:
                st.json(suggestions)
                send_structured_telegram_update(suggestions)
            else:
                st.error("Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi AI.")

with st.expander("üìà Ph√¢n t√≠ch bot hi·ªán t·∫°i"):
    col1, col2 = st.columns(2)
    
    with col1:
        coin_symbol = normalize_symbol(st.text_input("Coin ƒëang ch·∫°y", "bitcoin"))
        capital = st.number_input("V·ªën", value=100.0)
        range_low = st.number_input("Gi√° th·∫•p nh·∫•t", value=100.0)
        range_high = st.number_input("Gi√° cao nh·∫•t", value=110.0)
    
    with col2:
        pnl = st.number_input("T·ªïng PNL", value=1.0)
        profit_percent = st.number_input("L·ª£i nhu·∫≠n %", value=1.0)
        open_orders = st.number_input("S·ªë l·ªánh m·ªü", value=5)
        vs_currency_existing = st.text_input("Ti·ªÅn t·ªá bot hi·ªán t·∫°i", "usdt").lower()

    user_data = {
        'mode': 'existing_bot',
        'coin_symbol': coin_symbol,
        'capital': capital,
        'range_low': range_low,
        'range_high': range_high,
        'pnl': pnl,
        'profit_percent': profit_percent,
        'open_orders': open_orders,
        'vs_currency': vs_currency_existing
    }

    if st.button("üîç Ph√¢n t√≠ch bot"):
        df, price, currency = fetch_market_data(user_data['coin_symbol'], user_data['vs_currency'])
        if df is not None:
            st.success(f"Gi√° hi·ªán t·∫°i: {price} {currency.upper()}")
            st.line_chart(df.set_index('timestamp')['price'])

            deviation_msg = check_price_range(price, user_data['range_low'], user_data['range_high'])
            st.info(deviation_msg)

            user_data['vs_currency'] = currency
            user_data['current_price'] = price
            suggestions = call_gemini_api(user_data, df, price)
            if suggestions:
                st.json(suggestions)
                send_structured_telegram_update(suggestions)
            else:
                st.error("AI ch∆∞a tr·∫£ l·ªùi h·ª£p l·ªá.")

if __name__ == '__main__':
    st.sidebar.header("üìÖ Th√¥ng tin")
    st.sidebar.write(f"üïí {datetime.now().strftime('%H:%M:%S %d/%m/%Y')}")
